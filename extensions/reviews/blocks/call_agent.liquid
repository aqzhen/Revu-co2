<html>
  <head>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="../assets/styles.css" />
  </head>
  <script
    type="module"
    src="https://unpkg.com/deep-chat@1.4.11/dist/deepChat.bundle.js"
  ></script>
  <script>
    function checkEmail(emailAddress) {
        var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
        var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
        var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
        var sQuotedPair = '\\x5c[\\x00-\\x7f]';
        var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
        var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
        var sDomain_ref = sAtom;
        var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
        var sWord = '(' + sAtom + '|' + sQuotedString + ')';
        var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
        var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
        var sAddrSpec = sLocalPart + '\\x40' + sDomain; // complete RFC822 email address spec
        var sValidEmail = '^' + sAddrSpec + '$'; // as whole string

        var reValidEmail = new RegExp(sValidEmail);

        return reValidEmail.test(emailAddress);
    }
    function showProductDetails(productId) {
        console.log("1 - Product hovered with product id", productId);
        const productDetails = document.getElementById(`product-${productId}`);
        if (productDetails) {
            productDetails.style.display = 'block';
        }
    }

    function hideProductDetails(productId) {
        console.log("1 - Product hovered off with product id", productId);
        const productDetails = document.getElementById(`product-${productId}`);
        if (productDetails) {
            productDetails.style.display = 'none';
        }
    }
  </script>
  <body>
    <!-- Attributes can be set as strings either directly on the element (demo/textInput) or via a `setAttribute` method on its reference (introMessage).
      When passing JSON objects make sure that they are first correctly stringified (use the following tool https://jsonlint.com/), functions assigned
      to properties must not have external references and all regex values are properly escaped.
      You can also pass values into the component via properties by using the element reference (initialMessages).
      -->`
    <div id="chat-container" style="position: fixed; bottom: 10px; right: 2%; z-index: 1;">
        <button id="chat-toggle" style="border-radius: 50%; width: 50px; height: 50px; background-color: #5900ff; color: white; font-size: 1.2rem; border: none; outline: none;">
            <span id="chat-toggle-icon" style="display: flex; justify-content: center; align-items: center;">
               <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#007bff" width="36px" height="36px" style="transform: scaleX(-1);">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M12 2C6.48 2 2 6.48 2 12c0 1.74.46 3.41 1.32 4.87l-1.4 1.4C.45 16.27 0 14.19 0 12 0 5.37 5.37 0 12 0s12 5.37 12 12c0 2.19-.45 4.27-1.32 6.13l-1.4-1.4C21.54 15.41 22 13.74 22 12c0-5.52-4.48-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-9h2v4h-2v-4zm0-6h2v2h-2V5z"/>
</svg>

            </span>
        </button>
        <div id="chat-element" style="display: none;">
            <deep-chat
                id = "chat"
                style="border-radius: 10px; width: 28vw; height: calc(74vh - 70px); font-size: 1.5rem;"
                messageStyles='{
                    "default": {
                        "shared": {"bubble": {"borderRadius": "0px"}},
                        "user": {"bubble": {"backgroundColor": "#6c00ff"}}
                    }
                }'
                avatars="true"
                inputAreaStyle='{"backgroundColor": "#eeeeee"}'
                textInput='{
                    "styles": {
                        "container": {
                            "backgroundColor": "white",
                            "borderRadius": "0px",
                            "boxShadow": "unset",
                            "width": "70%",
                            "marginLeft": "-40px"
                        }
                    }
                }'
                submitButtonStyles='{
                    "position": "outside-right",
                    "submit": {
                        "container": {
                            "default": {
                                "backgroundColor": "#5900ff",
                                "marginBottom": "0.1em",
                                "marginLeft": "10px",
                                "borderRadius": "0px"
                            },
                            "hover": {"backgroundColor": "#4d00dc"},
                            "click": {"backgroundColor": "#3b00a8"}
                        },
                        "text": {
                            "content": "Send",
                            "styles": {"default": {"color": "white", "height": "1.78em", "width": "3em", "fontSize": "0.95em"}}
                        }
                    },
                    "loading": {"container": {"default": {"backgroundColor": "#afafaf"}}},
                    "stop": {
                        "container": {
                            "default": {"backgroundColor": "#919191"},
                            "hover": {"backgroundColor": "#8c8c8c"},
                            "click": {"backgroundColor": "#818181"}
                        },
                        "text": {"content": "Stop"}
                    },
                    "disabled": {"container": {"default": {"backgroundColor": "#afafaf"}}}
                }'
                auxiliaryStyle="
                    ::-webkit-scrollbar-thumb {
                        background-color: #5900ff;
                    }"
          
            >
            </deep-chat>
        </div>
    </div>

    <script>
        const chatContainer = document.getElementById("chat-container");
        const chatToggle = document.getElementById("chat-toggle");
        const chatElement = document.getElementById("chat-element");
        const chatToggleIcon = document.getElementById("chat-toggle-icon");

        const testingProduct = document.getElementById("product-9171171868972");
        if (testingProduct) {
            console.log("found this product details");
            testingProduct.style.display = "none";
        } else {
            console.log("did not find this product details");
        }

        {% comment %} const productButton = document.getElementById("product-button-9171190677804");
        const productDetails = document.getElementById("product-9171190677804");
        productTest.addEventListener("click", () => {
            console.log("Product clicked");
            productDetails.style.display = "none";
        }); {% endcomment %}
        function showProductDetails(productId) {
            document.addEventListener('DOMContentLoaded', function() {
                const productDetailsElement = document.getElementById("product-9171171868972"); // Will find the .some-element because it's guaranteed to be in the DOM
                if (productDetailsElement) {
                    console.log("found this product details");
                    productDetailsElement.style.display = "none";
                } else {
                    console.log("did not find this product details");
                } 
            });
            {% comment %} console.log("222 - Product hovered with product id", productId);
            const productDetailsElement = document.getElementById("product-9171171868972");{% endcomment %}
        }
    
        function hideProductDetails(productId) {
            console.log("222 - Product hovered off with product id", productId);
            const productDetailsElement = document.querySelector('#product-9171171868972');
            if (productDetailsElement) {
                console.log("found this product details");
                productDetailsElement.style.display = "none";
            } else {
                console.log("did not find this product details");
            }
        }
        
        chatToggle.addEventListener("click", () => {
            if (chatElement.style.display === "none") {
                chatElement.style.display = "block";
                chatToggleIcon.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" width="18px" height="18px">
                        <path d="M0 0h24v24H0z" fill="none"/>
                        <path d="M12 2C6.48 2 2 6.48 2 12c0 1.74.46 3.41 1.32 4.87l-1.4 1.4C.45 16.27 0 14.19 0 12 0 5.37 5.37 0 12 0s12 5.37 12 12c0 2.19-.45 4.27-1.32 6.13l-1.4-1.4C21.54 15.41 22 13.74 22 12c0-5.52-4.48-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-9h2v4h-2v-4zm0-6h2v2h-2V5z"/>
                    </svg>
                `;
            } else {
                chatElement.style.display = "none";
                chatToggleIcon.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="white" width="18px" height="18px">
                        <path d="M0 0h24v24H0z" fill="none"/>
                        <path d="M12 2C6.48 2 2 6.48 2 12c0 1.74.46 3.41 1.32 4.87l-1.4 1.4C.45 16.27 0 14.19 0 12 0 5.37 5.37 0 12 0s12 5.37 12 12c0 2.19-.45 4.27-1.32 6.13l-1.4-1.4C21.54 15.41 22 13.74 22 12c0-5.52-4.48-10-10-10zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-9h2v4h-2v-4zm0-6h2v2h-2V5z"/>
                    </svg>
                `;
            }
        });
    </script>
  </body>
  <!-- !!Either set the script as "module" or place your code in a timeout in order to wait for the component to load -->
  <script type="module">
    let searchType = "";
    const chat = document.getElementById("chat");
    const customerId = {{customer.id | json}};
    const customerName = {{customer.name | json}};
    const productId = {{product.id | json}};
    let email = "";
    if (customerId == null) {
        chat.initialMessages = [
            {
                text: "Welcome to CO2 Meter! Please enter your email address to continue:",
                role: 'ai',
            },
        ];
    } else {
        chat.initialMessages = [
            {
                text: "Hi " + customerName + ". Welcome to CO2 Meter! How can I help?",
                role: 'ai',
            },
            {
                html: `
                <div class="deep-chat-temporary-message">
                    <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Support Search</button>
                    <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Catalog Search</button>
                    <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Specific Product Search</button>
                </div>
                </div>`,
            },
        ];
    }
    chat.request = {
        handler: async (body, signals) => {
            if (body.messages[0].text == "Support Search") {
                if (email == "" && customerId == null) {
                    signals.onResponse({text: "Sorry, I can't help you with this yet. Please enter your email first."});
                } else {
                    searchType = "support";
                    signals.onResponse({text: "Great, looks like you need help with a general inquiry, please enter your query:"});
                }
            } else if (body.messages[0].text == "Catalog Search") {
                if (email == "" && customerId == null) {
                    signals.onResponse({text: "Sorry, I can't help you with this yet. Please enter your email first."});
                } else {
                    searchType = "catalog";
                    signals.onResponse({text: "Great, looks like you'd like to search over our catalog. What are you looking for?"});
                }
            } else if (body.messages[0].text == "Specific Product Search") {
                if (email == "" && customerId == null) {
                    signals.onResponse({text: "Sorry, I can't help you with this. Please enter your email first."});
                } else {
                    if (productId == null) {
                        signals.onResponse({text: "Sorry, I can't help you with this. Please select a product first."});
                    } else {
                        searchType = "product";
                        signals.onResponse({text: "Great, looks like you want to know more about this product! Please enter your query:"});
                    } 
                }
            } else if (body.messages[0].text == "Can't find an answer? Open Ticket") {
                searchType = "ticket";
                signals.onResponse({text: "Sorry I couldn't answer your question, I'll get someone on it right away. What would you like them to know?"});
            } else if (checkEmail(body.messages[0].text)) {
                email = body.messages[0].text;
                console.log("Email entered:", email);

                let htmlString = 
                    `<div class="deep-chat-temporary-message">
                            <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Support Search</button>
                            <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Catalog Search</button>
                            <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Specific Product Search</button>
                        </div>`;

                signals.onResponse({text: "Thank you! Email submitted:", html: htmlString });
            } else {
                try {
                    const data = {
                        "customerId": customerId,
                        "email": email,
                        "productId": productId,
                        "agentQuery": (body.messages)[0].text,
                        "searchType": searchType
                    };
                    const response = await fetch('/apps/my_app/agent/callAgentRouter', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    });

                    const responseData = await response.json();
                    console.log("API response:", responseData.text + responseData.html);
                    let openTicketHTML = 
                    `
                    <div class="deep-chat-temporary-message">
                        <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Can't find an answer? Open Ticket</button>
                    </div>
                    `;
                    let htmlString = 
                    `<div class="deep-chat-temporary-message">
                            <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Support Search</button>
                            <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Catalog Search</button>
                            <button class="deep-chat-button deep-chat-suggestion-button" style="border: 1px solid blue">Specific Product Search</button>
                        </div>`;

                    if (searchType == "product" || searchType == "support") {
                        htmlString = openTicketHTML + htmlString;
                    }
                    signals.onResponse({text: responseData.text, html: responseData.html + htmlString }); // displays the response text message
                  
                } catch (e) {
                    signals.onResponse({error: 'Error'}); // displays an error message
                }
            }
        }
    };
    function showProductDetails(productId) {
        console.log("3 - Product hovered with product id", productId);
        const productDetails = document.getElementById(`product-${productId}`);
        if (productDetails) {
            productDetails.style.display = 'block';
        }
    }

    function hideProductDetails(productId) {
        console.log("3 - Product hovered off with product id", productId);
        const productDetails = document.getElementById(`product-${productId}`);
        if (productDetails) {
            productDetails.style.display = 'none';
        }
    }
    </script>
</html>



{% schema %}
{
    "name": "Call Agent",
    "target": "section",
    "settings": []
}
{% endschema %}